generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
  previewFeatures = ["prismaSchemaFolder", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model User {
  id                    String      @id @default(uuid())
  email                 String      @unique
  username              String      @unique
  password              String
  role                  Role        @default(USER)
  inviteCode            InviteCode? @relation("UsedInviteCode", fields: [inviteCodeId], references: [id])
  inviteCodeId          String?     @map("invite_code_id")
  features              UserFeature[]
  tracks                Track[]
  sharedTracks          TrackShare[] @relation("SharedWithUser")
  notifications         Notification[]
  // Storage tracking
  extraQuotaBytes       BigInt      @default(0) @map("extra_quota_bytes")  // Additional storage quota purchased
  usedStorageBytes      BigInt      @default(0) @map("used_storage_bytes") // Current storage usage
  createdAt             DateTime    @default(now()) @map("created_at")
  updatedAt             DateTime    @updatedAt @map("updated_at")
  trackEvents           TrackEvent[]
  trackActivities       UserTrackActivity[]
  stemEvents            StemEvent[]
  stemActivities        UserStemActivity[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

enum SourceFormat {
  XM  @map("xm")  // FastTracker2
  IT  @map("it")  // Impulse Tracker
  MOD @map("mod") // ProTracker/NoiseTracker
}

enum TrackStatus {
  ACTIVE
  PENDING_DELETION
}

// Potential additional fields for Track model:
//
// 1. Release Information:
// - [ ] releaseDate: DateTime - The official release date of the track
// - [ ] originalReleaseDate: DateTime - For re-releases or remasters
// - [ ] recordLabel: String - The record label that released the track
// - [ ] catalogNumber: String - The label's catalog reference number
//
// 2. Musical Information:
// - [ ] bpm: Float - Beats per minute
// - [ ] key: String - Musical key of the track
// - [ ] isrc: String - International Standard Recording Code
// - [ ] genre: String[] - Multiple genres can be applicable
// - [ ] mood: String[] - Emotional categorization (e.g., "energetic", "melancholic")
// - [ ] language: String - Language of the lyrics
//
// 3. Credits:
// - [ ] composers: String[] - Song writers
// - [ ] producers: String[] - Track producers
// - [ ] features: String[] - Featured artists
// - [ ] performers: String[] - Session musicians or band members
// - [ ] credits: Json - Detailed production credits
//
// 4. Technical Information:
// - [ ] replayGain: Float - Volume normalization value
// - [ ] peakAmplitude: Float - Maximum amplitude in the track
// - [ ] encodingTechnology: String - Original recording technology
// - [ ] recordingLocation: String - Studio or venue where recorded
// - [ ] mixEngineer: String - Mix engineer name
// - [ ] masteringEngineer: String - Mastering engineer name
//
// 5. Commercial/Rights:
// - [ ] copyright: String - Copyright notice
// - [ ] license: String - Licensing terms
// - [ ] publisher: String - Music publisher
// - [ ] pLine: String - Phonographic copyright line
// - [ ] cLine: String - Copyright line
//
// 6. Additional Metadata:
// - [ ] lyrics: String - Song lyrics
// - [ ] description: String - Track description or notes
// - [ ] tags: String[] - Searchable keywords
// - [ ] explicit: Boolean - Whether the track contains explicit content
// - [ ] remixedBy: String - For remix versions
// - [ ] version: String - Type of version (e.g., "Radio Edit", "Extended Mix")
// - [ ] partOfAlbum: Boolean - Whether the track belongs to an album
// - [ ] albumName: String - Name of the album if applicable
// - [ ] trackNumber: Int - Position in album if applicable
// - [ ] discNumber: Int - For multi-disc albums
//
// These fields follow standards from:
// - [ ] ID3 tags (the metadata standard for MP3s)
// - [ ] MusicBrainz database schema
// - [ ] Streaming platform metadata systems
// - [ ] Industry-standard music databases like Gracenote

// TODO: The Url suffixes should be removed/replaced, as the values stored are not URLs (with
// the exception of originalUrl, which is a file:// URL until the track is converted).
model Track {
  id                    String                     @id @default(uuid())
  title                 String
  primaryArtistId       String                     @map("primary_artist_id")
  primaryArtist         Artist                     @relation("PrimaryArtist", fields: [primaryArtistId], references: [id])
  // primaryArtistName is denormalized from Artist
  // See packages/core-storage/prisma/migrations/20250304005245_add_primary_artist_name/migration.sql
  // for the trigger that keeps the primaryArtistName field in sync with the primaryArtistId field.
  primaryArtistName     String?                    @map("primary_artist_name")
  originalFormat        SourceFormat               @map("original_format")
  originalUrl           String                     @map("original_url")
  fullTrackWavUrl       String?                    @map("full_track_wav_url")
  fullTrackMp3Url       String?                    @map("full_track_mp3_url")
  fullTrackFlacUrl      String?                    @map("full_track_flac_url")
  waveformData          Float[]                    @map("waveform_data")
  duration              Float?                     @map("duration")
  coverArt              String?                    @map("cover_art")
  metadata              Json?
  isPublic              Boolean                    @default(false) @map("is_public")
  status                TrackStatus                @default(ACTIVE) @map("status")
  stems                 Stem[]
  userId                String                     @map("user_id")
  user                  User                       @relation(fields: [userId], references: [id])
  sharedWith            TrackShare[]               @relation("SharedTracks")
  createdAt             DateTime                   @default(now()) @map("created_at")
  updatedAt             DateTime                   @updatedAt @map("updated_at")
  wavConversionStatus   AudioFileConversionStatus  @default(NOT_STARTED) @map("wav_conversion_status")
  flacConversionStatus  AudioFileConversionStatus  @default(NOT_STARTED) @map("flac_conversion_status")
  wavCreatedAt          DateTime?                  @map("wav_created_at")
  wavLastRequestedAt    DateTime?                  @map("wav_last_requested_at")
  flacCreatedAt         DateTime?                  @map("flac_created_at")
  flacLastRequestedAt   DateTime?                  @map("flac_last_requested_at")

  // Storage Size Tracking
  originalSizeBytes     BigInt?   @map("original_size_bytes")
  mp3SizeBytes          BigInt?   @map("mp3_size_bytes")
  wavSizeBytes          BigInt?   @map("wav_size_bytes")
  flacSizeBytes         BigInt?   @map("flac_size_bytes")
  coverArtSizeBytes     BigInt?   @map("cover_art_size_bytes")
  // totalStemSizeBytes will be calculated dynamically or stored if needed for performance

  // Musical Information
  bpm                 Float?
  key                 String?
  isrc                String?      @map("isrc") // International Standard Recording Code
  language            String?
  isExplicit          Boolean      @default(false) @map("is_explicit")
  
  // Release Information
  releaseDate                   DateTime?                     @map("release_date")
  releaseDatePrecision          DatePrecision?  @default(DAY) @map("release_date_precision")
  originalReleaseDate           DateTime?                     @map("original_release_date")
  originalReleaseDatePrecision  DatePrecision?  @default(DAY) @map("original_release_date_precision")
  catalogNumber                 String?                       @map("catalog_number")
  
  // Commercial/Rights Information
  copyright           String?
  pLine               String?      @map("p_line") // Phonographic copyright line
  cLine               String?      @map("c_line") // Copyright line
  
  // Additional Metadata
  lyrics              String?
  description         String?
  version             String?      // e.g., "Radio Edit", "Extended Mix"
  // TODO: Maybe remixedBy could be represented in the Credits table
  remixedBy           String?      @map("remixed_by")
  
  // Technical Information
  replayGain          Float?       @map("replay_gain")
  peakAmplitude       Float?       @map("peak_amplitude")
  encodingTechnology  String?      @map("encoding_technology")
  recordingLocation   String?      @map("recording_location")
  
  // Relationships to normalized tables
  recordLabelId       String?      @map("record_label_id")
  recordLabel         RecordLabel? @relation(fields: [recordLabelId], references: [id])
  licenseId           String?      @map("license_id")
  license             License?     @relation(fields: [licenseId], references: [id])
  // licenseType is denormalized from License
  // See packages/core-storage/prisma/migrations/20250304005246_add_license_type_to_tracks/migration.sql
  // for the trigger that keeps the licenseType field in sync with the licenseId field.
  licenseType         LicenseType?      @map("license_type")
  
  // Many-to-many relationships, plus denormalized arrays for efficient filtering
  // See packages/core-storage/prisma/migrations/20250304005244_add_denormalized_arrays/migration.sql
  // and packages/core-storage/prisma/migrations/20250304005245_add_primary_artist_name/migration.sql
  // for triggers that keep the denormalized arrays in sync with the related tables,
  // and GIN indexes on the arrays for efficient filtering.
  // Classification/Taxonomy
  genres              TrackGenre[]
  genreNames          String[]     @default([]) @map("genre_names")
  moods               TrackMood[]
  moodNames           String[]     @default([]) @map("mood_names")
  tags                TrackTag[]
  tagNames            String[]     @default([]) @map("tag_names")

  // Associations
  albums              TrackAlbum[]
  // TODO: Add denormalized array for album names if needed
  credits             TrackCredit[]
  // artistNames is denormalized from Artist via TrackCredit and from the primaryArtistName field
  artistNames         String[]     @default([]) @map("artist_names")
  
  // Full-text search field (can be maintained by a trigger in PostgreSQL)
  // Note: This requires custom SQL as Prisma doesn't directly support tsvector
  searchVector        Unsupported("tsvector")?  @map("search_vector")
  searchConfigHash    String?                   @map("search_config_hash")

  // Play and download tracking
  totalPlays          Int       @default(0) @map("total_plays")
  totalDownloads      Int       @default(0) @map("total_downloads")
  uniqueListeners     Int       @default(0) @map("unique_listeners")
  lastPlayedAt        DateTime? @map("last_played_at")
  events              TrackEvent[]
  userActivities      UserTrackActivity[]
  dailyStats          DailyTrackStats[]
  monthlyStats        MonthlyTrackStats[]

  // TODO: Audit these indexes and remove any that are not needed.
  @@index([originalFormat, wavLastRequestedAt])
  @@index([originalFormat, flacLastRequestedAt])
  @@index([id, status])
  @@index([status, userId, title, createdAt, id])
  @@index([status, userId, primaryArtistId, createdAt, id])
  // TODO: Add this index if it's needed for sorting:
  // @@index([status, userId, primaryArtistName, createdAt, id])
  @@index([status, userId, duration, createdAt, id])
  @@index([status, isPublic, createdAt, id])
  @@index([primaryArtistName])
  @@index([genreNames], type: Gin)
  @@index([moodNames], type: Gin)
  @@index([artistNames], type: Gin)
  @@index([tagNames], type: Gin)
  @@index([searchVector], type: Gin)
  @@index([searchConfigHash])
  @@index([licenseType])
  @@map("tracks")
}

model TrackShare {
  id        String   @id @default(uuid())
  trackId   String   @map("track_id")
  track     Track    @relation("SharedTracks", fields: [trackId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation("SharedWithUser", fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([trackId, userId])
  @@index([trackId])
  @@index([userId])
  @@map("track_shares")
}

model Stem {
  id                    String                     @id @default(uuid())
  index                 Int
  name                  String
  type                  String
  wavUrl                String?                    @map("wav_url")
  mp3Url                String                     @map("mp3_url")
  flacUrl               String?                    @map("flac_url")
  waveformData          Float[]                    @map("waveform_data")
  duration              Float?                     @map("duration")
  trackId               String                     @map("track_id")
  track                 Track                      @relation(fields: [trackId], references: [id])
  wavConversionStatus   AudioFileConversionStatus  @default(NOT_STARTED) @map("wav_conversion_status")
  flacConversionStatus  AudioFileConversionStatus  @default(NOT_STARTED) @map("flac_conversion_status")
  wavCreatedAt          DateTime?                  @map("wav_created_at")
  wavLastRequestedAt    DateTime?                  @map("wav_last_requested_at")
  flacCreatedAt         DateTime?                  @map("flac_created_at")
  flacLastRequestedAt   DateTime?                  @map("flac_last_requested_at")
  createdAt             DateTime                   @default(now()) @map("created_at")
  updatedAt             DateTime                   @updatedAt @map("updated_at")

  // Play and download tracking
  totalPlays          Int       @default(0) @map("total_plays")
  totalDownloads      Int       @default(0) @map("total_downloads")
  uniqueListeners     Int       @default(0) @map("unique_listeners")
  lastPlayedAt        DateTime? @map("last_played_at")
  events              StemEvent[]
  userActivities      UserStemActivity[]
  dailyStats          DailyStemStats[]
  monthlyStats        MonthlyStemStats[]

  // Storage Size Tracking
  mp3SizeBytes  BigInt? @map("mp3_size_bytes")
  wavSizeBytes  BigInt? @map("wav_size_bytes")
  flacSizeBytes BigInt? @map("flac_size_bytes")

  @@unique([trackId, index])
  @@index([trackId])
  @@index([wavLastRequestedAt])
  @@index([flacLastRequestedAt])
  @@map("stems")
}

model InviteCode {
  id          String    @id @default(uuid())
  code        String    @unique
  reference   String?   // Optional reference field
  maxUses     Int       @default(1)
  usedCount   Int       @default(0) @map("used_count")
  expiresAt   DateTime? @map("expires_at")
  createdBy   String?   @map("created_by")
  users       User[]    @relation("UsedInviteCode")
  request     EarlyAccessRequest?
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("invite_codes")
}

model FeatureFlag {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String?
  isEnabled    Boolean       @default(false) @map("is_enabled")
  userFeatures UserFeature[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("feature_flags")
}

model UserFeature {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  user          User        @relation(fields: [userId], references: [id])
  featureFlagId String      @map("feature_flag_id")
  featureFlag   FeatureFlag @relation(fields: [featureFlagId], references: [id])
  isEnabled     Boolean     @default(false) @map("is_enabled")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([userId, featureFlagId])
  @@map("user_features")
}

model EarlyAccessRequest {
  id           String        @id @default(uuid())
  email        String        @unique
  status       RequestStatus @default(PENDING)
  inviteCode   InviteCode?   @relation(fields: [inviteCodeId], references: [id])
  inviteCodeId String?       @unique @map("invite_code_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("early_access_requests")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  EARLY_ACCESS_REQUEST
  // Add more types as needed:
  // TRACK_SHARED
  // COMMENT_ADDED
}

model Notification {
  id        String           @id @default(uuid())
  userId    String          @map("user_id")
  user      User            @relation(fields: [userId], references: [id])
  type      NotificationType
  title     String
  message   String
  isRead    Boolean         @default(false) @map("is_read")
  metadata  Json?
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  @@map("notifications")
}

enum AudioFileConversionStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum DatePrecision {
  YEAR
  MONTH
  DAY
}
