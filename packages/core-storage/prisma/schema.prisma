generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  username     String      @unique
  password     String
  role         Role        @default(USER)
  inviteCode   InviteCode? @relation("UsedInviteCode", fields: [inviteCodeId], references: [id])
  inviteCodeId String?     @map("invite_code_id")
  features     UserFeature[]
  tracks       Track[]
  sharedTracks TrackShare[] @relation("SharedWithUser")
  notifications Notification[]
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

// TODO: The Url suffixes should be removed/replaced, as the values stored are not URLs (with
// the exception of originalUrl, which is a file:// URL until the track is converted).
model Track {
  id               String       @id @default(uuid())
  title            String
  artist           String
  originalFormat   String       @map("original_format")
  originalUrl      String       @map("original_url")
  fullTrackWavUrl  String?      @map("full_track_wav_url")
  fullTrackMp3Url  String?      @map("full_track_mp3_url")
  fullTrackFlacUrl String?      @map("full_track_flac_url")
  waveformData     Float[]      @map("waveform_data")
  duration         Float?       @map("duration")
  coverArt         String?      @map("cover_art")
  metadata         Json?
  isPublic         Boolean      @default(false) @map("is_public")
  components       Component[]
  userId           String       @map("user_id")
  user             User         @relation(fields: [userId], references: [id])
  sharedWith       TrackShare[] @relation("SharedTracks")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  @@index([createdAt, id])
  @@index([title, id])
  @@index([artist, id])
  @@index([duration, id])
  @@map("tracks")
}

model TrackShare {
  id        String   @id @default(uuid())
  trackId   String   @map("track_id")
  track     Track    @relation("SharedTracks", fields: [trackId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation("SharedWithUser", fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([trackId, userId])
  @@map("track_shares")
}

model Component {
  id           String   @id @default(uuid())
  name         String
  type         String
  wavUrl       String   @map("wav_url")
  mp3Url       String   @map("mp3_url")
  flacUrl      String?  @map("flac_url")
  waveformData Float[]  @map("waveform_data")
  duration     Float?   @map("duration")
  trackId      String   @map("track_id")
  track        Track    @relation(fields: [trackId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("components")
}

model InviteCode {
  id          String    @id @default(uuid())
  code        String    @unique
  maxUses     Int       @default(1)
  usedCount   Int       @default(0) @map("used_count")
  expiresAt   DateTime? @map("expires_at")
  createdBy   String?   @map("created_by")
  users       User[]    @relation("UsedInviteCode")
  request     EarlyAccessRequest?
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("invite_codes")
}

model FeatureFlag {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String?
  isEnabled    Boolean       @default(false) @map("is_enabled")
  userFeatures UserFeature[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("feature_flags")
}

model UserFeature {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  user          User        @relation(fields: [userId], references: [id])
  featureFlagId String      @map("feature_flag_id")
  featureFlag   FeatureFlag @relation(fields: [featureFlagId], references: [id])
  isEnabled     Boolean     @default(false) @map("is_enabled")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([userId, featureFlagId])
  @@map("user_features")
}

model EarlyAccessRequest {
  id           String        @id @default(uuid())
  email        String        @unique
  status       RequestStatus @default(PENDING)
  inviteCode   InviteCode?   @relation(fields: [inviteCodeId], references: [id])
  inviteCodeId String?       @unique @map("invite_code_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("early_access_requests")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  EARLY_ACCESS_REQUEST
  // Add more types as needed:
  // TRACK_SHARED
  // COMMENT_ADDED
}

model Notification {
  id        String           @id @default(uuid())
  userId    String          @map("user_id")
  user      User            @relation(fields: [userId], references: [id])
  type      NotificationType
  title     String
  message   String
  isRead    Boolean         @default(false) @map("is_read")
  metadata  Json?
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  @@map("notifications")
}
