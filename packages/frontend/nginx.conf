events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server {
        listen 80;
        root /usr/share/nginx/html;
        index index.html;

        # MinIO bucket proxy - only expose the specific bucket
        location /storage/ {
            add_header X-Debug-Location "minio-bucket" always;
            
            # Only allow GET requests for presigned URLs
            limit_except GET {
                deny all;
            }

            # Rewrite storage path back to bucket name
            rewrite ^/storage/(.*) /wavtopia/$1 break;
            
            # Security headers
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "DENY" always;
            add_header X-XSS-Protection "1; mode=block" always;
            
            # Proxy to MinIO container
            proxy_pass http://localhost:9000;

            # Required headers for MinIO
            # Set host to minio:9000 to match what the presigned url will be generated for
            proxy_set_header Host minio:9000;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle large files
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Timeouts for large files
            proxy_connect_timeout 300;
            proxy_send_timeout 300;
            proxy_read_timeout 300;
            
            # Pass through MinIO headers
            proxy_pass_header Cache-Control;
            proxy_pass_header Expires;
            proxy_pass_header Pragma;
            proxy_pass_header Content-Disposition;
            
            # Remove any existing headers to avoid conflicts
            proxy_hide_header X-Cache;
            proxy_hide_header X-Cache-Hit;
        }

        # Track-specific routes with client-side caching enabled
        location ~ ^/api/track/[^/]+/stem/[^/]+\.[^/]+$ {
            add_header X-Debug-Location "track-stem" always;
            # TODO: Pass through the cache headers from the backend
            proxy_hide_header Cache-Control;
            proxy_hide_header Expires;
            proxy_hide_header Pragma;
            # FIXME: Increase cache expiry time
            add_header Cache-Control "public, max-age=120" always;
            expires 2m;
            proxy_pass http://localhost:3002;
            include /etc/nginx/proxy_params*;
        }

        location ~ ^/api/track/[^/]+/full\.[^/]+$ {
            # TODO: Pass through the cache headers from the backend
            add_header X-Debug-Location "track-full" always;
            proxy_hide_header Cache-Control;
            proxy_hide_header Expires;
            proxy_hide_header Pragma;
            # FIXME: Increase cache expiry time
            add_header Cache-Control "public, max-age=120" always;
            expires 2m;
            proxy_pass http://localhost:3002;
            include /etc/nginx/proxy_params*;
        }

        location ~ ^/api/track/[^/]+/cover$ {
            add_header X-Debug-Location "track-cover" always;
            proxy_hide_header Cache-Control;
            proxy_hide_header Expires;
            proxy_hide_header Pragma;
            # FIXME: Increase cache expiry time:
            add_header Cache-Control "public, max-age=120" always;
            expires 2m;
            proxy_pass http://localhost:3002;
            include /etc/nginx/proxy_params*;
        }

        # Frontend static files
        location / {
            try_files $uri $uri/ /index.html;
            add_header Cache-Control "no-cache";
        }

        # Backend API proxy
        location /api {
            # This will need increasing if wav/mp3 upload is enabled.
            client_max_body_size 10M;

            add_header Cache-Control "no-store, no-cache, must-revalidate";
            add_header Pragma "no-cache";
            expires 0;

            proxy_pass http://localhost:3002; # Could use the backend service name instead, but this is more representative of the current live setup.
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_read_timeout 300;
            proxy_connect_timeout 300;
            proxy_send_timeout 300;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Forward query parameters
            proxy_pass_request_headers on;
            proxy_pass_request_body on;
            proxy_buffering off;
            proxy_request_buffering off;
        }
    }
} 