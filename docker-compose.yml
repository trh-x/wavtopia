services:
  postgres:
    profiles:
      - production
      - development
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-wavtopia}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-wavtopia}
      POSTGRES_DB: ${POSTGRES_DB:-wavtopia}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - wavtopia-net

  pgadmin:
    profiles:
      - development
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@wavtopia.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-wavtopia123}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - wavtopia-net
    depends_on:
      - postgres

  minio:
    profiles:
      - production
      - development
    image: minio/minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-wavtopia}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-wavtopia123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - wavtopia-net

  redis:
    profiles:
      - production
      - development
    image: redis:7-alpine
    ports:
      - "6379:6379"
    environment:
      - REDIS_USERNAME=${REDIS_USERNAME:-wavtopia}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-wavtopia123}
    volumes:
      - redis_data:/data
    configs:
      - source: redis_config_template
        target: /etc/redis/redis.conf.template
    # Use sed to replace environment variables in the template file:
    # 1. Replace ${REDIS_PASSWORD} with the actual password
    # 2. Replace ${REDIS_USERNAME} with the actual username
    # 3. Write the result to redis.conf
    # 4. Start Redis with the generated config
    command: sh -c 'sed "s/\$${REDIS_PASSWORD}/${REDIS_PASSWORD}/g; s/\$${REDIS_USERNAME}/${REDIS_USERNAME}/g" /etc/redis/redis.conf.template > /etc/redis/redis.conf && redis-server /etc/redis/redis.conf'
    networks:
      - wavtopia-net

  tools:
    profiles:
      - build
    build:
      context: packages/media
      dockerfile: Dockerfile.tools
      args:
        - WORKSPACE_APT_IMAGE=${REGISTRY_PREFIX:-}wavtopia-apt-base
    image: ${REGISTRY_PREFIX:-}wavtopia-tools
    depends_on:
      workspace-apt-base:
        condition: service_completed_successfully

  workspace-apt-base:
    profiles:
      - build
    build:
      context: .
      dockerfile: Dockerfile.apt-base
    image: ${REGISTRY_PREFIX:-}wavtopia-apt-base

  workspace:
    profiles:
      - build
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - WORKSPACE_APT_IMAGE=${REGISTRY_PREFIX:-}wavtopia-apt-base
    image: ${REGISTRY_PREFIX:-}wavtopia-workspace
    depends_on:
      workspace-apt-base:
        condition: service_completed_successfully

  media:
    profiles:
      - production
    build:
      context: packages/media
      dockerfile: Dockerfile
      args:
        - WORKSPACE_IMAGE=${REGISTRY_PREFIX:-}wavtopia-workspace
        - WORKSPACE_APT_IMAGE=${REGISTRY_PREFIX:-}wavtopia-apt-base
    image: ${REGISTRY_PREFIX:-}wavtopia-media
    ports:
      - "3001:3001"
    volumes:
      # TODO: Mount this somewhere else so regular tmp files don't get created in the volume
      - temp_files:/tmp
    networks:
      - wavtopia-net
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_started
      postgres:
        condition: service_started

  backend:
    profiles:
      - production
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
      args:
        - WORKSPACE_IMAGE=${REGISTRY_PREFIX:-}wavtopia-workspace
        - WORKSPACE_APT_IMAGE=${REGISTRY_PREFIX:-}wavtopia-apt-base
    image: ${REGISTRY_PREFIX:-}wavtopia-backend
    ports:
      - "3002:3002"
    volumes:
      # TODO: Mount this somewhere else so regular tmp files don't get created in the volume
      - temp_files:/tmp
    networks:
      - wavtopia-net
    depends_on:
      minio:
        condition: service_started
      redis:
        condition: service_started
      postgres:
        condition: service_started

  # Optional frontend service, for testing
  frontend:
    profiles:
      - production-frontend
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
      args:
        - WORKSPACE_IMAGE=${REGISTRY_PREFIX:-}wavtopia-workspace
    ports:
      - "80:80"
    networks:
      - wavtopia-net

volumes:
  postgres_data:
  minio_data:
  redis_data:
  pgadmin_data:
  # TODO: Rename to temp_data
  temp_files:

configs:
  redis_config_template:
    file: ./config/redis/redis.conf.template

networks:
  wavtopia-net:
    driver: bridge
